class UnionFind: 
def __init__(self, n): 
self.parent = list(range(n)) 
self.rank = [0] * n 
def find(self, u): 
if self.parent[u] != u: 
self.parent[u] = self.find(self.parent[u])  # Path compression 
return self.parent[u] 
def union(self, u, v): 
root_u = self.find(u) 
root_v = self.find(v) 
if root_u != root_v: 
if self.rank[root_u] > self.rank[root_v]: 
self.parent[root_v] = root_u 
elif self.rank[root_u] < self.rank[root_v]: 
self.parent[root_u] = root_v 
else: 
self.parent[root_v] = root_u 
self.rank[root_u] += 1 
return True 
return False 
def verify_mst(n, edges, given_mst): 
uf = UnionFind(n) 
given_mst_weight = sum(weight for u, v, weight in given_mst) 
for u, v, weight in given_mst: 
uf.union(u, v) 
edges.sort(key=lambda x: x[2]) 
mst_edges = [] 
total_weight = 0 
edge_count = 0   
for u, v, weight in edges: 
if uf.union(u, v): 
mst_edges.append((u, v, weight)) 
total_weight += weight 
edge_count += 1 
if edge_count == n - 1: 
break 
if total_weight != given_mst_weight: 
return False, [] 
alternative_mst = [] 
uf2 = UnionFind(n) 
for u, v, weight in edges: 
if uf2.union(u, v): 
alternative_mst.append((u, v, weight)) 
if alternative_mst != given_mst: 
return False, alternative_mst 
return True, [] 
n = 4 
m = 5 
edges = [(0, 1, 10), (0, 2, 6), (0, 3, 5), (1, 3, 15), (2, 3, 4)] 
given_mst = [(2, 3, 4), (0, 3, 5), (0, 1, 10)] 
is_unique, alternative_mst = verify_mst(n, edges, given_mst) 
print("Is the given MST unique?", is_unique) 
if not is_unique: 
print("Another possible MST:", alternative_mst)
