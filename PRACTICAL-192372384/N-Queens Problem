def print_board(board): 
for row in board: 
print(" ".join(row)) 
print() 
def solve_n_queens(n): 
board = [["." for _ in range(n)] for _ in range(n)] 
results = [] 
solve(board, 0, results) 
return results 
def solve(board, col, results): 
if col >= len(board): 
results.append(["".join(row) for row in board]) 
return     
for i in range(len(board)): 
if is_safe(board, i, col): 
board[i][col] = 'Q' 
solve(board, col + 1, results) 
board[i][col] = '.' 
def is_safe(board, row, col): 
# Check for another queen in the same row to the left 
for i in range(col): 
if board[row][i] == 'Q': 
return False 
# Check the upper diagonal to the left 
for i, j in zip(range(row, -1, -1), range(col, -1, -1)): 
if board[i][j] == 'Q': 
return False 
# Check the lower diagonal to the left 
for i, j in zip(range(row, len(board)), range(col, -1, -1)): 
if board[i][j] == 'Q': 
return False 
return True 
# Example usage: 
n = 4 
solutions = solve_n_queens(n) 
for sol in solutions: 
print_board(sol)
